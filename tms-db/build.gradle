buildscript {
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:4.7.1'
    }
    repositories {
        jcenter()
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id 'java'
    id 'application'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply plugin: 'com.bmuschko.docker-java-application'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*

group = 'com.tms.platform'
version = '0.1.0'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('springCloudVersion', 'Greenwich.SR1')
    javaVersion = '8'
}

apply plugin: 'java'
sourceCompatibility = "${javaVersion}"
targetCompatibility = "${javaVersion}"

dependencies {
    // Project
    compile project(':tms-core')

    // FHIR R4
    compile group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-structures-r4', version: '3.7.0'

    // Database
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // Spring boot
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'

    // Spring cloud
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

application {
    mainClassName = 'com.tms.platform.db.TmsDbApplication'
}

docker {
    url = 'http://127.0.0.1:2375'
    javaApplication {
        baseImage = 'openjdk:8'
        tag = 'tms-db'
    }
}
task createContainer(type: DockerCreateContainer, dependsOn: dockerBuildImage) {
    dependsOn(clean, build)
    targetImageId { dockerBuildImage.getImageId() }
}

task startContainer(type: DockerStartContainer, dependsOn: createContainer) {
    targetContainerId { createContainer.getContainerId() }
}
